AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  myDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myCart:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Carts
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: serviceId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: serviceId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myServices:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Services
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  BarberLog:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Barbers
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: S
      - AttributeName: barberId
        AttributeType: S
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      - AttributeName: barberId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myBookings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: barberId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: barberId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/e956bf14622aeafcbd22a75a1cda4c36
      Handler: users.register
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /register
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/e956bf14622aeafcbd22a75a1cda4c36
      Handler: users.addupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /address
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/e956bf14622aeafcbd22a75a1cda4c36
      Handler: users.getuser
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getuser
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  LoginPhone:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/e956bf14622aeafcbd22a75a1cda4c36
      Handler: users.loginphone
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /loginphone
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  LoginOtp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/e956bf14622aeafcbd22a75a1cda4c36
      Handler: users.loginotp
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /loginotp
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddtoCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/11f7fc8cb23abab5defbbcf759b66d4f
      Handler: cart.addtocart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /addtocart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/11f7fc8cb23abab5defbbcf759b66d4f
      Handler: cart.getcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getcart
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  Quantity:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/11f7fc8cb23abab5defbbcf759b66d4f
      Handler: cart.quantity
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /quantity/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  DeleteFromCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/11f7fc8cb23abab5defbbcf759b66d4f
      Handler: cart.deletefromcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /deletefromcart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/087a74f4d724e9cb8875f312f9d1f147
      Handler: service.addservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /addservice
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  DelService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/087a74f4d724e9cb8875f312f9d1f147
      Handler: service.delservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /delservice/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  LocationUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/0a27ceed845d82670a438de013133d32
      Handler: barber.locationupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /locupd
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetBarbersByDate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/f9c68721f27bd194d515eb23164294c8
      Handler: booking.barberbyslot
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getbarb/{date}/{slot}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  BarberSelect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/f9c68721f27bd194d515eb23164294c8
      Handler: booking.selectbarber
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /book/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetBookings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/f9c68721f27bd194d515eb23164294c8
      Handler: booking.getbookings
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getbookings
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
