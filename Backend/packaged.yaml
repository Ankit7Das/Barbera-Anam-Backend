AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  myDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myCart:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Carts
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: serviceId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: serviceId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myServices:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Services
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  BarberLog:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BarbersLog
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: S
      - AttributeName: barberId
        AttributeType: S
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      - AttributeName: barberId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  myBookings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: serviceId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: serviceId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/7c2f676b5737b7fa6221c1ce9c79b11c
      Handler: users.register
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /register
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/7c2f676b5737b7fa6221c1ce9c79b11c
      Handler: users.addupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /address
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/7c2f676b5737b7fa6221c1ce9c79b11c
      Handler: users.getuser
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getuser
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  LoginPhone:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/7c2f676b5737b7fa6221c1ce9c79b11c
      Handler: users.loginphone
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /loginphone
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  LoginOtp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/7c2f676b5737b7fa6221c1ce9c79b11c
      Handler: users.loginotp
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /loginotp
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddtoCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/084e73827f3a9e5a16a59f3bae6d16bd
      Handler: cart.addtocart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /addtocart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/084e73827f3a9e5a16a59f3bae6d16bd
      Handler: cart.getcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getcart
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  Quantity:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/084e73827f3a9e5a16a59f3bae6d16bd
      Handler: cart.quantity
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /quantity/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  DeleteFromCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/084e73827f3a9e5a16a59f3bae6d16bd
      Handler: cart.deletefromcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /deletefromcart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  AddService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.addservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /addservice
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  DelService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.delservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /delservice/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetServiceByID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.getservicebyid
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getservbyid/{serviceid}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetAllServiceName:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.getallservicenames
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getallservname
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  UpdateService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.updateservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /updateservice
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetTrending:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.gettrending
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /gettrend
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetServiceByType:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.getservicebytype
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getsubtypes/{gender}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetServiceByGender:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.getservicebygender
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /gettypes/{gender}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetServiceBySubType:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/698d54fc0b0c57c169f4b566b4b0b69e
      Handler: service.getservicebysubtype
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getallserv/{gender}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  LocationUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/2c218cead91f66fa4e76d777abca135d
      Handler: barber.locationupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /locupd
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetBarbersByDate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/8b571b209def7109abf7d3d411fdec32
      Handler: booking.barberbyslot
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getbarb/{date}/{slot}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  BarberSelect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/8b571b209def7109abf7d3d411fdec32
      Handler: booking.selectbarber
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /book/{date}/{slot}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  GetBookings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://barbera-bucket/8b571b209def7109abf7d3d411fdec32
      Handler: booking.getbookings
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api
          Properties:
            Path: /getbookings
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
