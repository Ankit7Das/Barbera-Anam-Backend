AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:

  #---------------------------------------------------------------
  # DynamoDB tables
  #---------------------------------------------------------------
  myDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  myCart:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Carts
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: serviceId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: serviceId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  myServices:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Services
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BarberLog:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Barbers
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: S
        - AttributeName: barberId
          AttributeType: S
      KeySchema:
        - AttributeName: date
          KeyType: HASH
        - AttributeName: barberId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  myBookings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: barberId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: barberId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  #---------------------------------------------------------------

  #---------------------------------------------------------------
  # Login Functions
  #---------------------------------------------------------------    
  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Users/
      Handler: users.register
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /register
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  AddUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Users/
      Handler: users.addupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /address
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Users/
      Handler: users.getuser
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getuser
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
        
  # LoginEmail:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: Users/
  #     Handler: users.loginemail
  #     Runtime: nodejs12.x
  #     Events:
  #       apiForLambda:
  #         Type: Api 
  #         Properties:
  #           Path: /loginemail
  #           Method: post
  #     Role: arn:aws:iam::140544830924:role/BackendUser
  #     # Policies:
  #     #   DynamoDBWritePolicy:
  #     #     TableName: !Ref myDB

  # LoginPass:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: Users/
  #     Handler: users.loginpass
  #     Runtime: nodejs12.x
  #     Events:
  #       apiForLambda:
  #         Type: Api 
  #         Properties:
  #           Path: /loginpass
  #           Method: post
  #     Role: arn:aws:iam::140544830924:role/BackendUser
  #     # Policies:
  #     #   DynamoDBWritePolicy:
  #     #     TableName: !Ref myDB

  LoginPhone:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Users/
      Handler: users.loginphone
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /loginphone
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  LoginOtp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Users/
      Handler: users.loginotp
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /loginotp
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  #---------------------------------------------------------------

  #---------------------------------------------------------------
  # Cart Functions
  #---------------------------------------------------------------
  AddtoCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Cart/
      Handler: cart.addtocart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /addtocart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Cart/
      Handler: cart.getcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getcart
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser

  Quantity:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Cart/
      Handler: cart.quantity
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /quantity/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  DeleteFromCart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Cart/
      Handler: cart.deletefromcart
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /deletefromcart/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  #---------------------------------------------------------------

  #---------------------------------------------------------------
  # Service Functions
  #---------------------------------------------------------------
  AddService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.addservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /addservice
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  DelService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.delservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /delservice/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetServiceByID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.getservicebyid
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getservbyid/{serviceid}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetAllServiceName:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.getallservicenames
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getallservname
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser

  UpdateService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.updateservice
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /updateservice
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetTrending:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.gettrending
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /gettrend
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetServiceByType:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Services/
      Handler: service.getservicebytype
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getserv/{gender}/{type}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser
  #---------------------------------------------------------------

  #---------------------------------------------------------------
  # Barber Functions
  #---------------------------------------------------------------
  LocationUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Barber/
      Handler: barber.locationupdate
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /locupd
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser
  #---------------------------------------------------------------

  #---------------------------------------------------------------
  # Booking Functions
  #---------------------------------------------------------------
  GetBarbersByDate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Bookings/
      Handler: booking.barberbyslot
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getbarb/{date}/{slot}
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser

  BarberSelect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Bookings/
      Handler: booking.selectbarber
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /book/{serviceid}
            Method: post
      Role: arn:aws:iam::140544830924:role/BackendUser

  GetBookings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Bookings/
      Handler: booking.getbookings
      Runtime: nodejs12.x
      Events:
        apiForLambda:
          Type: Api 
          Properties:
            Path: /getbookings
            Method: get
      Role: arn:aws:iam::140544830924:role/BackendUser


            
  